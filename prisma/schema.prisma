// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  FREE
  GOLD
  DIAMOND
  PLATINUM
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  address                String?
  town                   String?
  country                String?
  phone                  String?
  email                  String    @unique
  emailVerified          DateTime?
  emailVerificationToken String?   @unique
  image                  String?
  hashedPassword         String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  conversationIds        String[]  @db.ObjectId
  role                   Role      @default(USER)
  accounts               Account[]
  websites               Website[]
  media Media[]
  // resetPasswordToken String? @unique
  // resetPasswordTokenExpiry DateTime?
}

model Website {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  description   String?
  published     Boolean     @default(false)
  subDomainName String?     @unique
  favicon       String?
  previewImage String?
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  webpages      Webpages[]
  ClassName     ClassName[]
}

model ClassName {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  websiteId  String   @db.ObjectId
  customData String?
  website    Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}

model Webpages {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?
  order        Int
  published     Boolean     @default(false)
  previewImage String?
  websiteId    String   @db.ObjectId
  website      Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}


model Media {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  type         String?
  name         String
  link         String     @unique
  userId String @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

}